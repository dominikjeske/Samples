//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

{{ for using in Usings ~}}
using {{ using }};
{{ end ~}}

namespace {{Namespace}}
{
    [GeneratedCode]
    {{~ ClassModifier }} sealed class {{ClassName}} : {{ClassBase}}
    {
        public {{ClassName}}({{ for par in Constructor }} {{par.Type}} {{par.Name}}{{ if !for.last}},{{ end -}}{{- end }}) : base({{ for par in BaseConstructor }}{{par}}{{ if !for.last}},{{ end -}}{{- end }})
        {
            {{ for prop in InjectedProperties ~}}
            {{ prop.Destination }} = {{ prop.Source }};
            {{ end ~}}
        }

        protected async override Task ReceiveAsyncInternal(Proto.IContext context)
        {
            if (await HandleSystemMessages(context))
                return;
            var msg = FormatMessage(context.Message);
            if (msg is ActorMessage ic)
            {
                ic.Context = context;
            }
            {{- "\n" -}}

            {{- #---------------- Generate list of query handlers ------------------------}}
            {{ for query in Queries }}
            {{ if for.index == 0 }}if{{ else }}else if{{ end -}}
            (msg is {{query.ParameterType}} query_{{for.index}})
            {
                var result = {{ if query.IsReturnTask }}await {{ end }}{{query.MethodName}}(query_{{for.index}});
                context.Respond(result);
                return;
            }
            {{- end }}
            {{- #---------------- Generate list of query handlers END --------------------}}

            {{- #---------------- Generate list of command handlers ------------------------}}
            {{ for command in Commands }}
            {{ if for.index == 0 }}if{{ else }}else if{{ end -}}
            (msg is {{command.ParameterType}} command_{{for.index}})
            {
                {{ if command.IsReturnTask }}await {{ end }}{{command.MethodName}}(command_{{for.index}});
                return;
            }
            {{- end }}
            {{- #---------------- Generate list of command handlers END --------------------}}
            

            {{- #---------------- Generate list of event handlers ------------------------}}
            {{ for event in Events }}
            {{ if for.index == 0 }}if{{ else }}else if{{ end -}}
            (msg is {{event.ParameterType}} event_{{for.index}})
            {
                {{ if event.IsReturnTask }}await {{ end }}{{event.MethodName}}(event_{{for.index}});
                return;
            }
            {{- end }}

            {{- "\n" -}}
            {{- #---------------- Generate list of event handlers END --------------------}}

            await UnhandledMessage(msg);
        }

        {{ if HasSubscriptions }}
        protected override async Task OnStarted(Proto.IContext context)
        {
            await base.OnStarted(context);

            {{ for sub in Subscriptions ~}}
            Subscribe<{{sub.MessageType}}{{ if sub.HasReturnType}}, {{sub.ReturnTypeGenericArgument}}{{ end -}} >({{ if sub.SubscribeOnParent}}true{{ end -}});
            {{ end ~}}
        }
        {{ end -}}
    }
}